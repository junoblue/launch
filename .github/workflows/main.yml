name: Launch Application CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2
  FRONTEND_INSTANCE_ID: i-04474421d6a28163d
  BACKEND_INSTANCE_ID: i-0a374e25291d206aa

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          cd backend && pip install -r requirements.txt
        
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Run backend tests
        working-directory: ./backend
        run: |
          python -m pytest tests/
        
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test

  deploy-backend:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::597088015766:role/launch-github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to backend instance
        working-directory: ./backend
        run: |
          # Create deployment package
          zip -r deploy.zip . -x "*.git*" "*.github*"
          
          # Upload deployment package to S3
          aws s3 cp deploy.zip s3://launch-deployment/backend/deploy.zip
          
          # Deploy using SSM
          aws ssm send-command \
            --instance-ids ${{ env.BACKEND_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo Starting backend deployment...",
              "sudo mkdir -p /opt/launch/backend",
              "cd /opt/launch/backend",
              "sudo systemctl stop gunicorn || true",
              "sudo rm -rf /opt/launch/backend/*",
              "aws s3 cp s3://launch-deployment/backend/deploy.zip /tmp/deploy.zip",
              "sudo unzip -o /tmp/deploy.zip -d /opt/launch/backend/",
              "sudo chown -R ubuntu:ubuntu /opt/launch/backend",
              "sudo cp /opt/launch/backend/gunicorn.service /etc/systemd/system/gunicorn.service",
              "python3 -m venv /opt/launch/venv",
              "source /opt/launch/venv/bin/activate",
              "pip install -r requirements.txt",
              "sudo systemctl daemon-reload",
              "sudo systemctl enable gunicorn",
              "sudo systemctl start gunicorn",
              "sleep 5",
              "sudo systemctl status gunicorn",
              "curl -s http://localhost:8000/health || echo Health check failed"
            ]'
        continue-on-error: false

  deploy-frontend:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::597088015766:role/launch-github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build
        working-directory: ./frontend
        run: |
          pwd
          ls -la
          ls -la src/
          cat vite.config.ts
          VITE_CWD=$PWD npm run build
          mkdir -p build
          mv dist/* build/

      - name: Deploy to frontend instance
        working-directory: ./frontend
        run: |
          # Create deployment package including nginx config
          zip -r deploy.zip build/* nginx/default.conf
          
          # Upload deployment package to S3
          aws s3 cp deploy.zip s3://launch-deployment/frontend/deploy.zip
          
          # Deploy using SSM
          aws ssm send-command \
            --instance-ids ${{ env.FRONTEND_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo Starting frontend deployment...",
              "sudo mkdir -p /opt/launch/frontend",
              "sudo rm -rf /opt/launch/frontend/*",
              "aws s3 cp s3://launch-deployment/frontend/deploy.zip /tmp/deploy.zip",
              "sudo unzip -o /tmp/deploy.zip -d /tmp/frontend-temp/",
              "sudo mv /tmp/frontend-temp/build/* /opt/launch/frontend/",
              "sudo mv /tmp/frontend-temp/nginx/default.conf /etc/nginx/sites-available/default",
              "sudo rm -rf /tmp/frontend-temp",
              "sudo chown -R ubuntu:ubuntu /opt/launch/frontend",
              "sudo nginx -t",
              "sudo systemctl reload nginx || (sudo systemctl restart nginx && sleep 5)",
              "curl -s http://localhost/health || echo Health check failed"
            ]'
        continue-on-error: false 