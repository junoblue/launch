name: Deploy Launch Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2
  FRONTEND_INSTANCE_ID: i-04474421d6a28163d
  BACKEND_INSTANCE_ID: i-0a374e25291d206aa

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::597088015766:role/launch-github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Create deployment package
        run: |
          # Create deployment package
          zip -r deploy.zip . -x "*.git*" "*.github*" "frontend/*"
          aws s3 cp deploy.zip s3://launch-deployment-artifacts/backend-deploy.zip

      - name: Download and extract on instance
        run: |
          aws ssm send-command \
            --instance-ids ${{ env.BACKEND_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "aws s3 cp s3://launch-deployment-artifacts/backend-deploy.zip /tmp/deploy.zip",
              "sudo mkdir -p /opt/launch/backend",
              "cd /opt/launch/backend",
              "sudo systemctl stop gunicorn || true",
              "sudo rm -rf /opt/launch/backend/*",
              "sudo unzip -o /tmp/deploy.zip -d /opt/launch/backend/",
              "sudo chown -R ubuntu:ubuntu /opt/launch/backend"
            ]'

      - name: Install dependencies and start service
        run: |
          aws ssm send-command \
            --instance-ids ${{ env.BACKEND_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cd /opt/launch/backend",
              "sudo python3 -m pip install --upgrade pip",
              "sudo python3 -m pip install -r requirements.txt",
              "sudo cp gunicorn.service /etc/systemd/system/gunicorn.service",
              "sudo systemctl daemon-reload",
              "sudo systemctl enable gunicorn",
              "sudo systemctl start gunicorn",
              "sleep 5",
              "sudo systemctl status gunicorn"
            ]'

  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          clean: true

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package.json'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::597088015766:role/launch-github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        working-directory: ./frontend
        run: |
          echo '{"name":"frontend","version":"1.0.0"}' > package.json
          npm install --force

      - name: Build
        working-directory: ./frontend
        run: npm run build

      - name: Deploy to frontend instance
        run: |
          # Create deployment package including nginx config
          cp frontend/nginx/default.conf frontend/dist/
          cd frontend/dist
          zip -r ../../deploy.zip *
          cd ../..
          
          # Upload to S3
          aws s3 cp deploy.zip s3://launch-deployment-artifacts/frontend-deploy.zip
          # Have instance download it
          aws ssm send-command \
            --instance-ids ${{ env.FRONTEND_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "aws s3 cp s3://launch-deployment-artifacts/frontend-deploy.zip /tmp/deploy.zip"
            ]'
          
          # Deploy
          aws ssm send-command \
            --instance-ids ${{ env.FRONTEND_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "sudo mkdir -p /opt/launch/frontend",
              "sudo rm -rf /opt/launch/frontend/*",
              "sudo unzip -o /tmp/deploy.zip -d /opt/launch/frontend/",
              "sudo cp /opt/launch/frontend/default.conf /etc/nginx/sites-available/default",
              "sudo rm -f /opt/launch/frontend/default.conf",
              "sudo chown -R ubuntu:ubuntu /opt/launch/frontend",
              "sudo nginx -t && sudo systemctl reload nginx || (sudo systemctl restart nginx && sleep 5)",
              "curl -s http://localhost/health || echo 'Health check failed'"
            ]' 